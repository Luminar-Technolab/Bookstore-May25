

            REACT - ADVANCED FRONT END TECHNOLOGY
        ----------------------------------------------

    1. React : is JS Library for building faster UI for web application
    2. Features of React
        - Virtual DOM
        - Reusable Components
        - JSX
    3. JSX (JavaScript XML) : Is an JS extension for writing HTML codes, used in react to display contents in webpage
        - JSX consists of JSX elements :
            const variable-name = <starting-tag>content</ending-tag>
        - Rules of JSX
            1. Every JSX code must be inside a single tag it can be container tag / react fragments (<></>)
            2. Every JSX tag must have closing tag.  <starting-tag>content</ending-tag> / self closing tags <tag-name/>
            3. In JSX elements attributes or style properties / values must be in camel case (fontSize)
            4. In JSX , attributes like 'class' must as "className" and 'for' as "htmlFor"
            5. In JSX we can directly add js code using curly braces: {js code}
    4. React App creation : 
        - using vite : npm create vite@latest reactAppName -- --template react
    5. File & Folder structure
    6. React is  a collection Components, they are arranged in tree like structure. Root node of react app is App Component. 
    7. Components : used to create UI, it can be an entire webpage or part of web page
        - To create Components, Create a file with file name starts with capital letter, also Component name must same as its file name
        - ways to create Components
            - Functional Based / stateless Component : use JS pure function to build Component and it must return JSX
            - Class Based / state full Component : use js class to build Component, it must have render method where we can give jsx code
    8. Life cycle Methods of Component
        - Mounting Phase : Putting JSX into DOM
            - constructor()
            - getDerivedStateFromProps()
            - render()
            - ComponentDidMount()
        - Updating Phase : When Component get updated
            - getDerivedStateFromProps()
            - shouldComponentUpdate()
            - render()
            - getShapshotBeforeUpdate()
            - componentDidUpdate()
        - Unmounting Phase : Removing Component from DOM
            - componentWillUnmount()

            Class Based Component                       Functional based Component
        --------------------------------------------------------------------------------
        1. uses js class to build Component             1. uses js pure function
        2. Statfull Component                           2. Stateless Component
        3. Uses constructor for initialising values     3. NO need of constructor
        4. Lifecycle methods are available              4. Lifecycle methods not available

    9. Styling React Component
        - Using Inline CSS : using style attribute
            - syntax: style={{properties:value,...}}
        - Using External CSS : using External css file
        - Using CSS Module file : using .module.css extension file to define style using class selector.
    10. Event Handling in react
        - Binding function without argument : use function-name only to call the function
        - Binding function with argument : call function use ()=>function-name(arg)
        - Binding function with argument as event : call function use (event)=>function-name(event)
    11. React props : Used to share datas from parent Component to its child, In react react only parent can share data to its child.
        - Props os properties of a Component, props is an object so data stored as key and value. 
        - parent can share its data to the child tag using its attributes
        - using 'props' as child Component function argument, using props we can access data in child
    12. Conditional rendering : we can control visbility of jsx element based on a condition, use ternary / truthy operator
    13. Handling List in react : To display list in jsx use "map" array method. Use 'key' props to all duplicating jsx items in list, key must be unique and used to identify by react dom
    14. React state : used to store values in a Component, whenever state changes Component also get re render. 
    15. React Hooks : are predefined function for enabling react component Features in Functional components, all hooks name will start with "use" keyword
        - How to use hooks in Functional component
            - import hook in component
            - call hook at top level of 
        - Hooks can be of 2 types
            - Predefined hooks
            - Customised hooks : create a js file with name starts with "use", inside the file define js function to complete task 
        - Common Hooks
            - useState : used to create state in Functional component, it Returns a stateful value, and a function to update it.
                const [stateValue, stateUpdationFunctionName] = useState(initialValue) 
            - useEffect : used to add side effects to a component
                useEffect(effect,dependency)
                - dependency : can be 3 ways
                    - no dependency : effect will apply all time in component
                    - empty array : effect will apply only at the creation of component
                    - [variable-name,...] : effect will apply not only at the creation of component but also  variable changes in component
            - useRef : used to store mutable data without re rendering the component, it also helps to get the reference of a html element into component
                -  useRef(initialValue) it return object called current.
            - useDispatch()
            - useSelector()
            - useParams() : Used to get dynamic values in url, it is an object
    16. Handling Form in React : React handle input data mainly in 2 ways
        - Controlled component : here input data will store inside the component state, so component has more control over the form data
        - Uncontrolled component : here component can get the reference of input tag to get the input tag, here component doesnot has more control over the form data
    17. Set up Route/path/url to a component
        - Install react-router-dom Library : npm i react-router-dom
        - Set up path for component using react-router-dom
            1. Entire react app must be render inside the 'BrowserRouter' of react-router-dom Library. 
            2. Place all component neds to be set up path inside Routes component, inside Routes use Route component to set up path for component using its 'path' and 'element' attributes
        - Dynamic Routing : to set up path  followed with column is used to store dynamic values in a url (ex: https://redux-cart-july24.netlify.app/:id/view) id is dynamic variable 
    18. API Handling in React : 
        - fetch method
        - Axios Library : Promise based HTTP request Handling
            - Install axios : npm i axios
            - Axios Instance is used to make api call :
                - Using : axios(requestConfiguration)
                    - requestConfiguration : is object with predefined keys (method,url,data,headers...)
            - Axios methods (GET,PUT , POST, DELETE) : axios.get(url)
    19. Data Shairing Technques in React
        - State Lifting : To share data from one component to another by lifting the data to their common parent and parent can share the lifted state/data using props with its children
        - Redux : A common storage will hold all data and it can be accessed by all components in the react app



                JSON SERVER - REST API CREATION
            ------------------------------------------
    1. Create a folder for json server
    2. Create json file to store data
    3. Install json-server : npm i json-server
    4. To run json file (available in localhost:3000) : npx json-server json-file-name

                DEPLOYING JSON SERVER USING NODE
        ------------------------------------------------
    1. Install stable version of json-server : npm i json-server@0.17.0
    2. Create index.js file
    3. Inside index,js file
        - import json-server
        - create server using Library json-server using create method
        - import json file
        - create middleware : using defaults()
        - define port number to run the app in localhost
        - use middleware in server
        - define routes for client request (api endpoints for server )
        - run server for client request using listen method

                REDUX : STATE MANAGEMENT TOOL
            ----------------------------------------
    1. A JS library for predictable and maintainable global state management and used in react to avoid props drilling
    2. REDUX consists of 2 Library
        - REDUX TOOLKIT : The official, opinionated, batteries-included toolset for efficient Redux development, npm install @reduxjs/toolkit
            - Create common storage: configureStore() and store immutable (objects / array) data in storage
            - Actions : to update data in store from component and they are similiar to function, to execute action it should be dispatch from component action output automatically return to reducers in Redux, use createAction() or createAsyncThunk() : to create asynchronous actions
            - Reducer : used to update data in storage
            - Slice : used to combine both action & reducer,  use createSlice(), extraReducer is used to handling result of asynchronous actions in slice, it uses builder object which can define different cases (pending/fulfilled/rejected)
        - REACT REDUX : Official React bindings for Redux, npm install react-redux
            - 'store' property of 'Provider' component from react-redux : used to provide redux storage to react components
            - Hooks : 
                - useDispatch() : hook used to dispatch action from component and it return dispatch function which is capable of executing action
                - useSelector(state=>state.reducername) : hook used to select data from store, return state from the store corresponding to the reducer name

    ----------------------------------------BACKEND TECHNOLOGY----------------------------------------------

                        MONGODB - DATABSE
            ----------------------------------------

    1. Database : is an organized collection of data to be stored permanently
    2. MongoDB is a document database.
    3. It stores data in a type of JSON format called 'BSON'
    4. Values may include numbers, strings, booleans, arrays, or even nested documents.
    5. MongoDB can be installed in locally or hoisted in cloud
    6. Sql Vs NoSql
                SQL                                         NoSQL
        ----------------------------------------------------------------------- 
        - Relational DATABSE                        - Document Database
        - Data is stored in table                   - Data stored in documents
        - Collection rows and collumn is 'table'    - Collection of document is 'Collection'
        - Uses a fixed schema                       - Uses dynamic schema
        - Uses in traditional bussiness app         - Used in Bigdata and real time app
    7. Every document stored in MongoDB has a unique key which generated by MongoDB itself. It stored in "_id" key and value in string type as haxadecimal numbers
    8. CRUD Operations in MongoDB
        - CRUD Methods
                - find({},projections) : to get all documents from a collection, projections is optional
                - findOne({key:value}) : to get a single document from a collection
                - insertOne({key:value}) : to insert one document in a collection
                - insertMany([{key:value}]) : to insert multiple documents in a collection
                - updateOne({key:value}) : to update a single document in a collection
                - updateMany({}) : to update all document in a collection
                - deleteOne() : to delete a single document in a collection
                - deleteMany() :  to delete all document in a collection
            - Quering Operators : used to compare and reference documents
                - comparison :{field-name:{operator:value}}
                    - $eq : value are equal
                    - $ne : value not equal
                    - $gt 
                    - $gte 
                    - $lt
                    - $lte 
                    - $in
                - logical 
                    - $and
                    - $or 
                    - $nor
                    - $not 
                - Evalution
                    - $regex : allow use of regular expression when evaluating field value
                    - $text : perform text search
                    - $where : uses to match js expression in document
                - Updation 
                    - fileds
                        - $inc : used to increment
                        - $set : set values of a filed
                        - $rename : rename a filed
                        - $unset : removes filed from a document
                    - Array
                        - $pop : remove first/last value from an array
                        - $pull : remove all elements where match the query
                        - $push : to add element to an array
        - Aggregation : operations allow you to group, sort, perform calculations, analyze data, and much more.
            - $lookup : Performs a left outer join to a collection 
                - syntax : {
                $lookup:
                    {
                    from: <collection to join>,
                    localField: <field from the input documents>,
                    foreignField: <field from the documents of the "from" collection>,
                    as: <output array field>
                    }
                }
            - $group
            - $sort
            - $limit
            - $match
    9. MongoDB Indexing : Used to improve eficiency and speed of data retrieval. Index is a data structure, db.collection.createIndex() 

    MongoDB Atlas : cloud database platform
    ----------------------------------------
    1. Is a service that allows you to set up, deploy, and scale a database without worrying about on-premise physical hardware, software updates, and the details of configuring for performance.
    2. Steps to create db in MongoDB Atlas
        - create project
        - Create cluster
        - Create database inside cluster
        - Update Network access of db,
        - Update db access
        - get connections string : clusters->connect->drivers-> copy connections string 

    Mongoose : JavaScript library for working with MongoDB
    ------------------------------------------------------
    1. Mongoose is a JavaScript object-oriented programming library that creates a connection between MongoDB and the Node.js JavaScript runtime environment.
    2. Install Mongoose : npm i mongoose
    3. connect() method is used to connect mongodb with node
    4. Schema : used define structure of a documents within a collection
    5. model : similar to collection in mongodb
    6. CRUD Operators
        - read / get : find(),findOne(),findById()
        - create : create object for model, the save the object using save() method mongoose
        - update : updateOne(), updateMany(), findByIdAndUpdate()
        - delete : deleteOne(), deleteMany(), findByIdAndDelete()

                NODE JS : RUNTIME ENVIROMMENT FOR JS 
            -------------------------------------------
    1. is a free, open source tool that lets you run JavaScript outside the web browser.
    2. build fast and scalable applications like web servers, APIs, tools, and more.
    3. uses an event-driven, non-blocking model.
    4. Node.js vs Browser
                Node js                             Browser JS
       --------------------------------   ---------------------------
        - designed for server-side          - are for client-side applications
        development
        - provides APIs for file system     - provide DOM, fetch, and UI APIs
        networking, and OS
        - Node.js uses global               - browsers use window or self
        - uses CommonJS ('require' for      - ES modules (import & export)
        importing 'module.exports' for 
        exporting) 
        - APIs for timers, process along    - only event loop
        with event loop
        - access environment variables      - it cannot access env
        - Package Management: uses npm/yarn - CDNs or bundlers.
    5. The Node.js REPL (Read-Eval-Print Loop) is an interactive shell for executing JavaScript code.
    6. Debugging Node.js Applications using inspector
    7. Node.js V8 Engine : 
        - Just-In-Time (JIT) Compilation: Converts JavaScript into optimized machine code instead of interpreting it
    8. Node.js Architecture : uses a 'single-threaded, event-driven' architecture that is designed to handle many connections at once, efficiently and without blocking the main thread.
        - Node.js processes requests:
            1. Client Request Phase

            Clients send requests to the Node.js server
            Each request is added to the Event Queue
            2. Event Loop Phase

            The Event Loop continuously checks the Event Queue
            Picks up requests one by one in a loop
            3. Request Processing

            Simple (non-blocking) tasks are handled immediately by the main thread
            Complex/blocking tasks are offloaded to the Thread Pool
            4. Response Phase

            When blocking tasks complete, their callbacks are placed in the Callback Queue
            Event Loop processes callbacks and s
        - Event loop order of handling function  
           1. Execute the main script (synchronous code)
           2. Process any microtasks (Promises, process.nextTick)
           3. Execute timers (setTimeout, setInterval)
           4. Run I/O callbacks (file system, network operations)
           5. Process setImmediate callbacks
           6. Handle close events (like socket.on('close'))
    9. Node.js Error Handling
        - Error-First Callbacks : callbacks first argument is error that can handle error during the process
        - Using try...catch with Async/Await
        - Using 'uncaughtException' uses Global Error Handling for uncaught exception
    10. Node.js Modules : organize code into logical, reusable components
        - Core Built-in Modules
            - fs : handling file system
            - http 
            - path 
            - os
            - events 
        - To use any built-in module, use the require('Package-name/file-name') function:
        - To export multiple data from a file : exports object
        - To export single item from a file : module.exports
    11. NPM is a package manager for Node.js packages : 
        - A package in Node.js contains all the files you need for a module.
        - Modules are JavaScript libraries you can include in your project.
        - To install package : use npm install package-name
        - To use package : require('package-name')
    12. Node.js package.json : special file that describes your Node.js project.
        - It contains information about your app, such as its name, version, dependencies, scripts, and more.
        - To create package.json file for a project : npm init -y
    13. CORS (Cross Origin Resource Shairing) : Is browser security mechanism that controls how a web application running on one origin (domain, protocol, or port) can request resources from a different origin

                EXPRESS JS : FRAMEWORK OF NODE JS 
            -------------------------------------------
    1. Used for web server application
    2. Install express : npm install express
    3. Features
        - Web Applications
        - APIs
        - Performance
        - Middleware
    4. Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).
        - syntax : app.METHOD(PATH, HANDLER Callback)
        - Route Parameters : are specified in the path with a colon : prefix., in express use 'req.params'
            Example: /users/:userId/books/:bookId , route Parameters - userId, bookId
        - Query Parameters :  are key-value pairs that appear after the ? in a URL., req.query.key
            Example URL: http://example.com/search?q=express&page=2
            an: q=express, page=2
        - Routing in Separate Files : using Express Router, using router we can set up path, 
            - syntax : express.Router().httpRequest(PATH,HANDLER Callback)
    5. Middleware : Is a function that can control request-Response cycle
        -  several types of middleware:
            - Application-level Middleware : is bound to the Express application using app.use(middleware) or app.METHOD() functions.
            - Router-level Middleware : similiar to application specific middleware  but bound to an instance of express.Router().httpRequest(path,middleware,HANDLER callbacks)
        - Built-in Middleware
            - express.json(): Parse JSON request bodies
            - express.urlencoded(): Parse URL-encoded request bodies
            - express.static(): Serve static files
            - express.Router(): Create modular route handlers
        - Third-party Middleware
            - CORS
        - Custom Middleware : function middleware-name(req,res,next){ body }
            - req : request object
            - res : response object
            - next() : to pass control to the next middleware function
    6. Authentication & Authorization
        - Authentication is the process of verifying the identity of a user or system to ensure they are who they claim to be.
        - Authorization is the process of determining and granting access rights to an authenticated user or system.
    7. JSON Web Token (JWT)
        - A JSON Web Token (JWT) is a secure way to send information between a client and a server. 
        - It is mainly used in web applications and APIs to verify users and prevent unauthorized access. 
        - A JWT is JSON data secured with a cryptographic signature.
        - JWT Token Structure : Header. Payload. Signature
        - JWT token Works
            - Client request for login
            - Server send jwt token to client along with the response
            - Add jwt token with further request from client
            - server verify token before processing request
        - Methods
            - sign(Payload,secret) : used to generate token 
            - verify(token,secret) : used to verify token
            
    STEPS TO BUILD EXPRESS SERVER
    -------------------------------
    1. Create a folder
    2. using 'npm init -y' command create package.json, update script with 'start' as 'node index.js'
    3. create entry point of app : index.js
    4. create .env file
    5. install packages: express, cors, dotenv, mongoose, jsonwebtoken
    6. create .gitignore add files/folders
    7. steps for creating server in index.js file
        - import express, cors, dotenv,
        - import router file
        - import db file
        - create server app using express
        - use cors in server
        - use express.json() middleware in server
        - use router in server
        - create port
        - server started in the port using listen method from express
        - resolve GET request to server: server-app.httpRequest(path,handler)
        - run the index.js file using : nodemon index.js / node index.js
    8. Create routing folder 
        - create router.js file
            - import express
            - create router using express.Router()
            - define path using router : router.httpRequest(path, HANDLER callbacks)
            - export router
    9. Create folder for controller : used to define logic for resolving client request
        - create controller file
            - import model
            - create request handler functions
            - export function
    10. Create a folder for DB : used to define db connections
        - create js file
            - import mongoose
            - get db connection string from process.env
            - import db file into index.js
    11. Create a folder for model : used to communicate between controller and database
        - create js file
            - import mongoose
            - create object for mongoose Schema class, passing arument as document structure
            - create model using schema
            - export model


